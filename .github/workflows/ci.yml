name: CI Pipeline

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx for multi-platform builds (optional, but recommended)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Configure AWS CLI with credentials
      - name: Configure AWS CLI
        run: |
          echo "[default]" > ~/.aws/config
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          aws configure set default.region ${{ secrets.AWS_REGION }}

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Build the Docker image
      - name: Build the Docker image
        run: |
          docker build -t myapp:latest .

      # Tag the Docker image with the ECR repository URL
      - name: Tag the Docker image
        run: |
          docker tag myapp:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/myapp:latest

      # Push the Docker image to Amazon ECR
      - name: Push the Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/myapp:latest

  deploy:
    needs: build  # Der Deploy-Job l√§uft nur, wenn der Build-Job erfolgreich war
    runs-on: ubuntu-latest

    steps:
      # Deploy the image to Amazon ECS
      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service --cluster my-cluster --service my-service --force-new-deployment --region ${{ secrets.AWS_REGION }}
